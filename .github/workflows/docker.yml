name: Push Docker Image


on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      docker_tag:
        description: 'Docker tag'
        required: false
        default: 'latest' 
        type: string
      region:
        description: region
        default: 'region'
        type: string

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  # aws region
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # cat $HOME/.kube/config | base64
  # create secrets with the base64 encoded values
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  KUBE_NAMESPACE: production


jobs:
  build-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions-ecosystem/action-regex-match@v2
        id: regex-match
        with:
          text: ${{ github.event.inputs.docker_tag }}
          regex: '^v\d*(.*?)\d*$'
          flags: gm

      - name: check input
        id: check_input
        run: echo "::set-output name=match::$(echo ${{ inputs.region }})"

      - name: Checkout repository
        uses: actions/checkout@v3

      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}          

      - name: render jinja2 templates to task definition json files
        if: ${{ inputs.region  == 'us-east' }}
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: 'relayers/ecs/task_definition-${{ env.ENVIRONMENT }}.j2'
          output_file: 'relayers/ecs/task_definition-${{ matrix.relayer_id }}_${{ env.ENVIRONMENT }}.json'
          data_format: json
          variables: |
            relayerId=${{ matrix.relayer_id }}
            awsAccountId=${{ env.AWS_STAGE }}
            awsRegion=${{ env.AWS_REGION }}
            awsEfs=${{ secrets.DEVNET_EFS_1 }}


      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ inputs.docker_tag }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: EKS Deployment
        id: deploy-to-eks
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_DATA }}                                                                                                          
          RELEASE_IMAGE: ${{ env.REGISTRY }}/${{ github.event.repository.name }}:${{ inputs.docker_tag }}
        with:                                                                                                     
          args: set image deployment/my-pod app=$RELEASE_IMAGE --record -n ${{ env.KUBE_NAMESPACE }}   

      - name: Verify EKS Deployment
        id: verify-eks-deployment
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_DATA }}
        with:
          args: rollout status deploy my-pod -n ${{ env.KUBE_NAMESPACE }}

  build-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: haya14busa/action-cond@v1
        id: condval
        with:
          cond: ${{ inputs.region == 'us-east' }}
          if_true: "value for pull request event"
          if_false: "value for non pull request event"          

      - name: render jinja2 templates to task definition json files
        if: ${{ inputs.region  == 'us-east' }}
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: 'relayers/ecs/task_definition-${{ env.ENVIRONMENT }}.j2'
          output_file: 'relayers/ecs/task_definition-${{ matrix.relayer_id }}_${{ env.ENVIRONMENT }}.json'
          data_format: json
          variables: |
            relayerId=${{ matrix.relayer_id }}
            awsAccountId=${{ env.AWS_STAGE }}
            awsRegion=${{ env.AWS_REGION }}
            awsEfs=${{ secrets.DEVNET_EFS_1 }}
